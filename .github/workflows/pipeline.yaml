name: Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: yarn install
      - name: Check linter
        run: yarn lint:ci
      - name: Run tests
        run: yarn test -- --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
      - name: Build
        run: yarn build

  release:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Use Node.js 22.x
        uses: actions/setup-node@v3
        with:
          node-version: 22.x
      - name: Install dependencies
        run: yarn install
      - name: Fetch all tags
        run: git fetch --tags --force
      - name: List tags
        run: git tag -l
      - name: Run semantic-release
        id: semantic
        run: |
          yarn semantic-release --no-ci > release.log 2>&1 || true
          cat release.log
          NEW_VERSION=$(grep -oP 'Created tag v\K[^\s]+' release.log | head -1)
          if [ -z "$NEW_VERSION" ]; then
            NEW_VERSION=$(grep -oP 'The next release version is \K[^\s]+' release.log | head -1)
          fi
          if [ -z "$NEW_VERSION" ]; then
            echo "Could not determine new version from semantic-release output."
            exit 1
          fi
          echo "new_release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(release): ${{ steps.semantic.outputs.new_release_version }}'
          title: 'chore(release): ${{ steps.semantic.outputs.new_release_version }}'
          body: 'This is an auto-generated PR with changelogs for the new release.'
          branch: 'release/${{ steps.semantic.outputs.new_release_version }}'
      - name: Enable automerge
        if: steps.cpr.outputs.pull-request-number != ''
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          token: ${{ secrets.GH_PAT }}
          pull-request-number: ${{ steps.cpr.outputs.pull-request-number }}
          merge-method: squash
