{"numFailedTestSuites":4,"numFailedTests":7,"numPassedTestSuites":14,"numPassedTests":130,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":2,"numTodoTests":0,"numTotalTestSuites":18,"numTotalTests":137,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1752941126870,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["cachePopulate"],"duration":17,"failureDetails":[{"message":"thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\""}],"failureMessages":["Error: thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at /home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts:15:5\n    at _dispatchDescribe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:55:5)\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts:14:1)\n    at Runtime._execModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"cachePopulate should populate documents using cache","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should populate documents using cache"},{"ancestorTitles":["cachePopulate"],"duration":1,"failureDetails":[{"message":"thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\""}],"failureMessages":["Error: thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at /home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts:15:5\n    at _dispatchDescribe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:55:5)\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts:14:1)\n    at Runtime._execModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"cachePopulate should handle multiple populate options","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle multiple populate options"},{"ancestorTitles":["cachePopulate"],"duration":1,"failureDetails":[{"message":"thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\""}],"failureMessages":["Error: thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at /home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts:15:5\n    at _dispatchDescribe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:55:5)\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts:14:1)\n    at Runtime._execModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"cachePopulate should handle nested populations","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle nested populations"}],"endTime":1752941132763,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcachePopulate › should populate documents using cache\u001b[39m\u001b[22m\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m describe(\u001b[32m'cachePopulate'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m setupTestDB()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m         applySpeedGooseCacheLayer(mongoose\u001b[33m,\u001b[39m {})\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/features/cachePopulate.test.ts\u001b[39m\u001b[0m\u001b[2m:15:5\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/features/cachePopulate.test.ts\u001b[39m\u001b[0m\u001b[2m:14:1)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcachePopulate › should handle multiple populate options\u001b[39m\u001b[22m\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m describe(\u001b[32m'cachePopulate'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m setupTestDB()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m         applySpeedGooseCacheLayer(mongoose\u001b[33m,\u001b[39m {})\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/features/cachePopulate.test.ts\u001b[39m\u001b[0m\u001b[2m:15:5\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/features/cachePopulate.test.ts\u001b[39m\u001b[0m\u001b[2m:14:1)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mcachePopulate › should handle nested populations\u001b[39m\u001b[22m\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m describe(\u001b[32m'cachePopulate'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m setupTestDB()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m         applySpeedGooseCacheLayer(mongoose\u001b[33m,\u001b[39m {})\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/features/cachePopulate.test.ts\u001b[39m\u001b[0m\u001b[2m:15:5\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/features/cachePopulate.test.ts\u001b[39m\u001b[0m\u001b[2m:14:1)\u001b[22m\u001b[2m\u001b[22m\n","name":"/home/arqo/projekty/speedgoose/test/features/cachePopulate.test.ts","startTime":1752941127006,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["populationUtils","getDocumentCacheKey"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"populationUtils getDocumentCacheKey should generate correct cache key for document","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should generate correct cache key for document"},{"ancestorTitles":["populationUtils","handleCachedPopulation"],"duration":2,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'mockReturnValue')\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/utils/populationUtils.test.ts:28:53)\n    at Promise.then.completed (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusHook (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:281:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:246:5)\n    at _runTestsForDescribeBlock (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"populationUtils handleCachedPopulation should correctly identify IDs to populate","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should correctly identify IDs to populate"},{"ancestorTitles":["populationUtils","handleCachedPopulation"],"duration":2,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'mockReturnValue')\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/utils/populationUtils.test.ts:28:53)\n    at Promise.then.completed (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusHook (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:281:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:246:5)\n    at _runTestsForDescribeBlock (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:121:9)\n    at run (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"populationUtils handleCachedPopulation should fetch missing documents from database and cache them","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should fetch missing documents from database and cache them"}],"endTime":1752941133010,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mpopulationUtils › handleCachedPopulation › should correctly identify IDs to populate\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m         beforeEach(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 28 |\u001b[39m             (getCacheStrategyInstance \u001b[36mas\u001b[39m jest\u001b[33m.\u001b[39m\u001b[33mMock\u001b[39m)\u001b[33m.\u001b[39mmockReturnValue(mockCacheStrategy)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m             mockCacheStrategy\u001b[33m.\u001b[39mgetDocuments\u001b[33m.\u001b[39mmockClear()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m             mockCacheStrategy\u001b[33m.\u001b[39msetDocuments\u001b[33m.\u001b[39mmockClear()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m             mockModel\u001b[33m.\u001b[39mfind\u001b[33m.\u001b[39mmockClear()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/utils/populationUtils.test.ts\u001b[39m\u001b[0m\u001b[2m:28:53)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mpopulationUtils › handleCachedPopulation › should fetch missing documents from database and cache them\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'mockReturnValue')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m         beforeEach(() \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 28 |\u001b[39m             (getCacheStrategyInstance \u001b[36mas\u001b[39m jest\u001b[33m.\u001b[39m\u001b[33mMock\u001b[39m)\u001b[33m.\u001b[39mmockReturnValue(mockCacheStrategy)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m             mockCacheStrategy\u001b[33m.\u001b[39mgetDocuments\u001b[33m.\u001b[39mmockClear()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 30 |\u001b[39m             mockCacheStrategy\u001b[33m.\u001b[39msetDocuments\u001b[33m.\u001b[39mmockClear()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m             mockModel\u001b[33m.\u001b[39mfind\u001b[33m.\u001b[39mmockClear()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/utils/populationUtils.test.ts\u001b[39m\u001b[0m\u001b[2m:28:53)\u001b[22m\u001b[2m\u001b[22m\n","name":"/home/arqo/projekty/speedgoose/test/utils/populationUtils.test.ts","startTime":1752941132777,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["InMemoryStrategy.isHydrationEnabled"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"InMemoryStrategy.isHydrationEnabled should return false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false"},{"ancestorTitles":["InMemoryStrategy.refreshTTLForCachedResult"],"duration":212,"failureDetails":[],"failureMessages":[],"fullName":"InMemoryStrategy.refreshTTLForCachedResult should call re-set entry with passed data and","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call re-set entry with passed data and"},{"ancestorTitles":["InMemoryStrategy.isValueCached"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"InMemoryStrategy.isValueCached should return false when the value is not cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when the value is not cached"},{"ancestorTitles":["InMemoryStrategy.isValueCached"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"InMemoryStrategy.isValueCached should return true when the value is cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when the value is cached"}],"endTime":1752941133333,"message":"","name":"/home/arqo/projekty/speedgoose/test/cachingStrategies/inMemoryStrategy.test.ts","startTime":1752941133015,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createInMemoryCacheClientWithNamespace"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"createInMemoryCacheClientWithNamespace should return Keyv instance with opts","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return Keyv instance with opts"},{"ancestorTitles":["createInMemoryCacheClientWithNamespace"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createInMemoryCacheClientWithNamespace should set and return objects as they are - without stringify ","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should set and return objects as they are - without stringify "},{"ancestorTitles":["getResultsFromCache"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getResultsFromCache should set and return objects as they are - without stringify when using getResultsFromCache","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should set and return objects as they are - without stringify when using getResultsFromCache"},{"ancestorTitles":["setKeyInHydrationCaches"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInHydrationCaches keys after set should be accessible with the getHydrationCache method","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"keys after set should be accessible with the getHydrationCache method"},{"ancestorTitles":["setKeyInHydrationCaches"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInHydrationCaches getHydrationVariationsCache should return set with unique keys ","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"getHydrationVariationsCache should return set with unique keys "},{"ancestorTitles":["setKeyInHydrationCaches"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInHydrationCaches should allow to overwrite keys in hydration cache ","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should allow to overwrite keys in hydration cache "},{"ancestorTitles":["addValueToInternalCachedSet"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"addValueToInternalCachedSet should create set with first element if does not exists for given key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should create set with first element if does not exists for given key"},{"ancestorTitles":["addValueToInternalCachedSet"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"addValueToInternalCachedSet should add next element to exisitng set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add next element to exisitng set"},{"ancestorTitles":["addValueToInternalCachedSet"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"addValueToInternalCachedSet should prevent parrarel saves into set","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should prevent parrarel saves into set"},{"ancestorTitles":["clearCacheForKey"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"clearCacheForKey should log informations with debugger","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log informations with debugger"},{"ancestorTitles":["clearCacheForKey"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"clearCacheForKey should clear cached key from results cache","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should clear cached key from results cache"},{"ancestorTitles":["clearCacheForRecordId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"clearCacheForRecordId should log informations with debugger","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should log informations with debugger"},{"ancestorTitles":["clearCacheForRecordId"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"clearCacheForRecordId should clear hydration cache","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clear hydration cache"},{"ancestorTitles":["clearCachedResultsForModel"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"clearCachedResultsForModel should log informations with debugger","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should log informations with debugger"},{"ancestorTitles":["clearCachedResultsForModel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"clearCachedResultsForModel should clear results for given model","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should clear results for given model"},{"ancestorTitles":["setKeyInResultsCaches"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInResultsCaches should call context debuger","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should call context debuger"},{"ancestorTitles":["setKeyInResultsCaches"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInResultsCaches should addValueToCache with proper params","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should addValueToCache with proper params"},{"ancestorTitles":["setKeyInResultsCaches"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInResultsCaches should set key in results cache ","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should set key in results cache "},{"ancestorTitles":["setKeyInResultsCaches"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInResultsCaches should set key in model cache ","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should set key in model cache "},{"ancestorTitles":["setKeyInResultsCaches"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"setKeyInResultsCaches should set key records cache if it contains some documents with ids","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should set key records cache if it contains some documents with ids"},{"ancestorTitles":["refreshTTLTimeIfNeeded"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"refreshTTLTimeIfNeeded should schedule TTL refreshing when refreshTtlOnRead is true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should schedule TTL refreshing when refreshTtlOnRead is true"},{"ancestorTitles":["refreshTTLTimeIfNeeded"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"refreshTTLTimeIfNeeded should not schedule TTL refreshing when refreshTtlOnRead is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not schedule TTL refreshing when refreshTtlOnRead is false"},{"ancestorTitles":["isCached"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isCached should return false when key is not cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false when key is not cached"},{"ancestorTitles":["isCached"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isCached should return true when key is cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when key is cached"}],"endTime":1752941133486,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/cacheClientUtils.test.ts","startTime":1752941133343,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getReferenceModelNameFromSchema"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getReferenceModelNameFromSchema should handle empty type array","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty type array"},{"ancestorTitles":["hydrateResults"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"hydrateResults should properly recreate all documents from raw objects and turn them into deep populated documents","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should properly recreate all documents from raw objects and turn them into deep populated documents"}],"endTime":1752941133611,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/hydrateUtils.test.ts","startTime":1752941133493,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getConfig"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getConfig should return test config registered in DiContainer","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return test config registered in DiContainer"},{"ancestorTitles":["objectSerializer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"objectSerializer should return object without mutating it","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return object without mutating it"},{"ancestorTitles":["objectDeserializer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"objectDeserializer should return object without mutating it","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return object without mutating it"},{"ancestorTitles":["isCachingEnabled"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isCachingEnabled it should return true when caching is enabled in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"it should return true when caching is enabled in config"},{"ancestorTitles":["isCachingEnabled"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isCachingEnabled it should return false when caching is disabled in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"it should return false when caching is disabled in config"},{"ancestorTitles":["Cache-related functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cache-related functions should return the Hydration Cache","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return the Hydration Cache"},{"ancestorTitles":["Cache-related functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cache-related functions should return the Hydration Variations Cache","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return the Hydration Variations Cache"},{"ancestorTitles":["Cache-related functions"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Cache-related functions should return the Cache Strategy Instance","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return the Cache Strategy Instance"},{"ancestorTitles":["customStringifyReplacer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"customStringifyReplacer should return 'regex:' prefixed string for RegExp objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return 'regex:' prefixed string for RegExp objects"},{"ancestorTitles":["customStringifyReplacer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"customStringifyReplacer should return the original value for non-RegExp objects","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return the original value for non-RegExp objects"}],"endTime":1752941133731,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/commonUtils.test.ts","startTime":1752941133626,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["RedisStrategy.isHydrationEnabled"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.isHydrationEnabled should return true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true"},{"ancestorTitles":["RedisStrategy.removeKeyForCache"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.removeKeyForCache should call del method on redis client with correct namespace and key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call del method on redis client with correct namespace and key"},{"ancestorTitles":["RedisStrategy.addValueToCacheSet"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.addValueToCacheSet should call sadd method on redis client with correct namespace and value","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call sadd method on redis client with correct namespace and value"},{"ancestorTitles":["RedisStrategy.addValueToCache"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.addValueToCache should call sadd method on redis client with correct namespace and value with use of pipeline","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should call sadd method on redis client with correct namespace and value with use of pipeline"},{"ancestorTitles":["RedisStrategy.getValueFromCache"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.getValueFromCache should call sadd method on redis client with correct namespace and value with use of pipeline","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call sadd method on redis client with correct namespace and value with use of pipeline"},{"ancestorTitles":["RedisStrategy.getValueFromCache"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.getValueFromCache should return null if there was no value assigned to test key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if there was no value assigned to test key"},{"ancestorTitles":["RedisStrategy.getValueFromCache"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.getValueFromCache should return value parsed from JSON","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return value parsed from JSON"},{"ancestorTitles":["RedisStrategy.getValuesFromCachedSet"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.getValuesFromCachedSet should call smembers method on redis client","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should call smembers method on redis client"},{"ancestorTitles":["RedisStrategy.getValuesFromCachedSet"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.getValuesFromCachedSet should return value returned by the smembers method","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return value returned by the smembers method"},{"ancestorTitles":["RedisStrategy.addValueToManyCachedSets"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.addValueToManyCachedSets should call sadd method on redis client assigning value for each namespace","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should call sadd method on redis client assigning value for each namespace"},{"ancestorTitles":["RedisStrategy.clearResultsCacheWithSet"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.clearResultsCacheWithSet should call del method on redis with the values assigned to given namespace","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should call del method on redis with the values assigned to given namespace"},{"ancestorTitles":["RedisStrategy.refreshTTLForCachedResult"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.refreshTTLForCachedResult should call expire for given key","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should call expire for given key"},{"ancestorTitles":["RedisStrategy.isValueCached"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.isValueCached should return true if value is cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if value is cached"},{"ancestorTitles":["RedisStrategy.isValueCached"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"RedisStrategy.isValueCached should return false if value is not cached","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if value is not cached"}],"endTime":1752941133847,"message":"","name":"/home/arqo/projekty/speedgoose/test/cachingStrategies/redisStrategy.test.ts","startTime":1752941133739,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getDebugger"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getDebugger should return undefined if debug mode is not enabled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return undefined if debug mode is not enabled"},{"ancestorTitles":["getDebugger"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getDebugger should return undefined if debug config is not set","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return undefined if debug config is not set"},{"ancestorTitles":["getDebugger"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getDebugger should return funciton if debug mode is enabled","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return funciton if debug mode is enabled"},{"ancestorTitles":["getDebugger"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getDebugger should return funciton if debug mode is enabled for given model name","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return funciton if debug mode is enabled for given model name"},{"ancestorTitles":["getDebugger"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getDebugger should return funciton if debug mode is enabled for operation","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return funciton if debug mode is enabled for operation"},{"ancestorTitles":["setupDebugger"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"setupDebugger should register debugger namespaces","invocations":1,"location":null,"numPassingAsserts":6,"retryReasons":[],"status":"passed","title":"should register debugger namespaces"}],"endTime":1752941133961,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/debuggerUtils.test.ts","startTime":1752941133852,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["isResultWithId"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"isResultWithId should be truthy if result is object with key _id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be truthy if result is object with key _id"},{"ancestorTitles":["isResultWithId"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"isResultWithId should be falsy if result is object without key _id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be falsy if result is object without key _id"},{"ancestorTitles":["isResultWithId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isResultWithId should be falsy if result is not a object","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should be falsy if result is not a object"},{"ancestorTitles":["isArrayOfObjectsWithIds"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"isArrayOfObjectsWithIds should be truthy if first element in is object with key _id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be truthy if first element in is object with key _id"},{"ancestorTitles":["isArrayOfObjectsWithIds"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isArrayOfObjectsWithIds should be falsy if first element in is object without key _id","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be falsy if first element in is object without key _id"},{"ancestorTitles":["isArrayOfObjectsWithIds"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"isArrayOfObjectsWithIds should be falsy if result is not a object","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should be falsy if result is not a object"},{"ancestorTitles":["isResultWithIds"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isResultWithIds should be truthy if first element in is object with key _id or array of objects with _id key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should be truthy if first element in is object with key _id or array of objects with _id key"},{"ancestorTitles":["isResultWithIds"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isResultWithIds should be falsy if first element in is object without key _id or array of objects without _id key","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should be falsy if first element in is object without key _id or array of objects without _id key"},{"ancestorTitles":["isResultWithIds"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isResultWithIds should be falsy if result is not a object","invocations":1,"location":null,"numPassingAsserts":8,"retryReasons":[],"status":"passed","title":"should be falsy if result is not a object"},{"ancestorTitles":["getValueFromDocument"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getValueFromDocument should return value from root of object, and nested paths","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should return value from root of object, and nested paths"},{"ancestorTitles":["setValueOnDocument"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"setValueOnDocument should set value on root of object, and nested paths","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set value on root of object, and nested paths"},{"ancestorTitles":["getMongooseModelNameFromDocument"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseModelNameFromDocument should return proper model name from mongoose document","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return proper model name from mongoose document"},{"ancestorTitles":["getMongooseModelNameFromDocument"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseModelNameFromDocument returned model name should be registered in mongoose instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"returned model name should be registered in mongoose instance"},{"ancestorTitles":["getMongooseModelFromDocument"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseModelFromDocument should return proper model from mongoose document","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return proper model from mongoose document"},{"ancestorTitles":["getMongooseModelFromDocument"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseModelFromDocument should be falsy if there is no mongoose instance registered in di container","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be falsy if there is no mongoose instance registered in di container"},{"ancestorTitles":["getMongooseModelByName"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseModelByName should return proper model by its name","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return proper model by its name"},{"ancestorTitles":["getMongooseModelByName"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseModelByName should be falsy if there is no mongoose instance registered in di container","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should be falsy if there is no mongoose instance registered in di container"},{"ancestorTitles":["getMongooseInstance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getMongooseInstance should return mongoose instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return mongoose instance"},{"ancestorTitles":["isMongooseUnpopulatedField"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isMongooseUnpopulatedField should return true if the entry is mongooseId","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if the entry is mongooseId"},{"ancestorTitles":["isMongooseUnpopulatedField"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isMongooseUnpopulatedField should return true if the entry is stringified MongooseId","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if the entry is stringified MongooseId"},{"ancestorTitles":["isMongooseUnpopulatedField"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"isMongooseUnpopulatedField should return true if the entry is array of mongoose Ids","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if the entry is array of mongoose Ids"},{"ancestorTitles":["isMongooseUnpopulatedField"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isMongooseUnpopulatedField should return true if the entry is array of stringified MongooseIds","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if the entry is array of stringified MongooseIds"},{"ancestorTitles":["isMongooseUnpopulatedField"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"isMongooseUnpopulatedField should return false if the entry is not an id","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false if the entry is not an id"}],"endTime":1752941134097,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/mongooseUtils.test.ts","startTime":1752941133966,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["prepareQueryOperationContext"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"prepareQueryOperationContext should properly overwrite operationParams, according to query and speedGoose config","invocations":1,"location":null,"numPassingAsserts":7,"retryReasons":[],"status":"passed","title":"should properly overwrite operationParams, according to query and speedGoose config"},{"ancestorTitles":["prepareAggregateOperationParams"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"prepareAggregateOperationParams should properly overwrite operationParams, according to aggregate pipeline and speedGoose config","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should properly overwrite operationParams, according to aggregate pipeline and speedGoose config"},{"ancestorTitles":["isLeanQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isLeanQuery should return true if lean() method was called on find query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if lean() method was called on find query"},{"ancestorTitles":["isLeanQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isLeanQuery should return false if lean() method was not called on find query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if lean() method was not called on find query"},{"ancestorTitles":["isLeanQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isLeanQuery should return true if lean() method was called on findOne query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if lean() method was called on findOne query"},{"ancestorTitles":["isLeanQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isLeanQuery should return false if lean() method was not called on findOne query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return false if lean() method was not called on findOne query"},{"ancestorTitles":["isCountQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isCountQuery should return true when countDocuments method was called on query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when countDocuments method was called on query"},{"ancestorTitles":["isCountQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isCountQuery should return true when estimatedDocumentCount method was called on query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true when estimatedDocumentCount method was called on query"},{"ancestorTitles":["isCountQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isCountQuery should return true if some of the count group methods were not called on find query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if some of the count group methods were not called on find query"},{"ancestorTitles":["stringifyQueryParam"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"stringifyQueryParam should return stringified array of sorted projection key:values when using select method on query","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return stringified array of sorted projection key:values when using select method on query"},{"ancestorTitles":["stringifyQueryParam"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"stringifyQueryParam should return stringified array of sorted projection key:values when using projection as param in find","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return stringified array of sorted projection key:values when using projection as param in find"},{"ancestorTitles":["stringifyPopulatedPaths"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"stringifyPopulatedPaths should return stringified array of sorted paths to populate","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return stringified array of sorted paths to populate"},{"ancestorTitles":["shouldHydrateResult"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"shouldHydrateResult should return false if hydration is disabled for given caching strategy","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return false if hydration is disabled for given caching strategy"},{"ancestorTitles":["shouldHydrateResult"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"shouldHydrateResult should return true if hydration is enabled and  for given caching strategy","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should return true if hydration is enabled and  for given caching strategy"},{"ancestorTitles":["shouldHydrateResult"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"shouldHydrateResult should return false if hydration is enabled but query return type is not Document","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false if hydration is enabled but query return type is not Document"},{"ancestorTitles":["isDistinctQuery"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"isDistinctQuery should return true if query was called with distinct method","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true if query was called with distinct method"},{"ancestorTitles":["isDistinctQuery"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isDistinctQuery should return false if query was called without distinct method","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return false if query was called without distinct method"}],"endTime":1752941134219,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/queryUtils.test.ts","startTime":1752941134105,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["CommonCacheStrategyAbstract.isHydrationEnabled"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"CommonCacheStrategyAbstract.isHydrationEnabled should return true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return true"}],"endTime":1752941134331,"message":"","name":"/home/arqo/projekty/speedgoose/test/cachingStrategies/commonCacheStrategyAbstract.test.ts","startTime":1752941134225,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register new service in DiContainer with access to redis instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to redis instance"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register new service in DiContainer with access to cache strategy instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to cache strategy instance"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register two new services in DiContainer with access to hydrated documents access","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should register two new services in DiContainer with access to hydrated documents access"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register new service in DiContainer with access to config","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to config"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register new service in DiContainer with access to mongoose instance","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to mongoose instance"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should extend mongoose query interfaces with cacheQuery() function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extend mongoose query interfaces with cacheQuery() function"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should extend mongoose aggregate interfaces with cachePipeline() function","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extend mongoose aggregate interfaces with cachePipeline() function"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register internal mongoose events","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register internal mongoose events"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should register new service in DiContainer with access to queues","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to queues"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should set redis caching strategy if it was set in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set redis caching strategy if it was set in config"},{"ancestorTitles":["applySpeedGooseCacheLayer"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"applySpeedGooseCacheLayer should set in memory caching strategy if it was set in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should set in memory caching strategy if it was set in config"}],"endTime":1752941134459,"message":"","name":"/home/arqo/projekty/speedgoose/test/wrapper.test.ts","startTime":1752941134335,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getRecordAffectedByAction"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"getRecordAffectedByAction should not add multitenancyKey to projection if it was not set in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should not add multitenancyKey to projection if it was not set in config"},{"ancestorTitles":["getRecordAffectedByAction"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getRecordAffectedByAction should add multitenancyKey to projection if it was set in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should add multitenancyKey to projection if it was set in config"}],"endTime":1752941134542,"message":"","name":"/home/arqo/projekty/speedgoose/test/plugin/utils.test.ts","startTime":1752941134464,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getCachedSetsQueue"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getCachedSetsQueue should return access to queue of sets","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should return access to queue of sets"},{"ancestorTitles":["registerInternalQueueWorkers"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"registerInternalQueueWorkers should register new service in DiContainer with access to queues","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to queues"},{"ancestorTitles":["scheduleTTlRefreshing"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"scheduleTTlRefreshing should not push to the queue if the key is already scheduled","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should not push to the queue if the key is already scheduled"},{"ancestorTitles":["scheduleTTlRefreshing"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"scheduleTTlRefreshing should push to the queue if the key is not already scheduled","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should push to the queue if the key is not already scheduled"}],"endTime":1752941134660,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/queueUtils.test.ts","startTime":1752941134544,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getRedisInstance"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getRedisInstance should return access redis instance if redis uri was set in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return access redis instance if redis uri was set in config"},{"ancestorTitles":["getRedisInstance"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getRedisInstance should return null if registerRedisClient was not called with uri","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if registerRedisClient was not called with uri"},{"ancestorTitles":["getRedisListenerInstance"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getRedisListenerInstance should return access redis listener instance if redis uri was set in config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return access redis listener instance if redis uri was set in config"},{"ancestorTitles":["getRedisListenerInstance"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"getRedisListenerInstance should return null if registerRedisClient was not called with uri","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should return null if registerRedisClient was not called with uri"},{"ancestorTitles":["publishRecordIdOnChannel"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"publishRecordIdOnChannel should publish message on redis channel when redisUri is in the config","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should publish message on redis channel when redisUri is in the config"},{"ancestorTitles":["registerRedisClient"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"registerRedisClient should register new service in DiContainer with access to redis instance","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should register new service in DiContainer with access to redis instance"},{"ancestorTitles":["registerRedisClient"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"registerRedisClient should not register new service in DiContainer when redis already exists","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should not register new service in DiContainer when redis already exists"}],"endTime":1752941134778,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/redisUtils.test.ts","startTime":1752941134664,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["generateCacheKeyForRecordAndModelName"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"generateCacheKeyForRecordAndModelName should properly generate key for record and model name ","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should properly generate key for record and model name "},{"ancestorTitles":["generateCacheKeyForModelName"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"generateCacheKeyForModelName should properly generate key when multitenantValue is in input","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should properly generate key when multitenantValue is in input"},{"ancestorTitles":["generateCacheKeyForModelName"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"generateCacheKeyForModelName should properly generate key when multitenantValue is NOT in input","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should properly generate key when multitenantValue is NOT in input"},{"ancestorTitles":["generateCacheKeyForSingleDocument"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"generateCacheKeyForSingleDocument should properly generate key for record and model name ","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should properly generate key for record and model name "}],"endTime":1752941134874,"message":"","name":"/home/arqo/projekty/speedgoose/test/utils/cacheKeyUtils.test.ts","startTime":1752941134781,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Cache Invalidation Tests"],"duration":24,"failureDetails":[{"message":"thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\""}],"failureMessages":["Error: thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at /home/arqo/projekty/speedgoose/test/invalidation.test.ts:9:5\n    at _dispatchDescribe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:55:5)\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/invalidation.test.ts:5:1)\n    at Runtime._execModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Cache Invalidation Tests should invalidate parent cache when child is updated","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should invalidate parent cache when child is updated"}],"coverage":{},"endTime":1752941138292,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mCache Invalidation Tests › should invalidate parent cache when child is updated\u001b[39m\u001b[22m\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  7 |\u001b[39m     \u001b[36mlet\u001b[39m \u001b[33mFriendModel\u001b[39m\u001b[33m:\u001b[39m mongoose\u001b[33m.\u001b[39m\u001b[33mModel\u001b[39m\u001b[33m<\u001b[39m\u001b[33mFriend\u001b[39m\u001b[33m>\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  8 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  9 |\u001b[39m     beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m         \u001b[36mawait\u001b[39m mongoose\u001b[33m.\u001b[39mconnect(\u001b[33mTEST_SPEEDGOOSE_CONFIG\u001b[39m\u001b[33m.\u001b[39muri)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 11 |\u001b[39m         \u001b[33mUserModel\u001b[39m \u001b[33m=\u001b[39m mongoose\u001b[33m.\u001b[39mmodel\u001b[33m<\u001b[39m\u001b[33mUser\u001b[39m\u001b[33m>\u001b[39m(\u001b[32m'User'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m         \u001b[33mFriendModel\u001b[39m \u001b[33m=\u001b[39m mongoose\u001b[33m.\u001b[39mmodel\u001b[33m<\u001b[39m\u001b[33mFriend\u001b[39m\u001b[33m>\u001b[39m(\u001b[32m'Friend'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/invalidation.test.ts\u001b[39m\u001b[0m\u001b[2m:9:5\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/invalidation.test.ts\u001b[39m\u001b[0m\u001b[2m:5:1)\u001b[22m\u001b[2m\u001b[22m\n\n\n  \u001b[1m● \u001b[22mTest suite failed to run\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n    \u001b[0m \u001b[90m 13 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 14 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 15 |\u001b[39m     afterAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m mongoose\u001b[33m.\u001b[39mdisconnect()\u001b[33m;\u001b[39m\n     \u001b[90m 17 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 18 |\u001b[39m\u001b[0m\n\n      \u001b[2mat \u001b[22m\u001b[0m\u001b[36mtest/invalidation.test.ts\u001b[39m\u001b[0m\u001b[2m:15:5\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mtest/invalidation.test.ts\u001b[39m\u001b[0m\u001b[2m:5:1)\u001b[22m\n","name":"/home/arqo/projekty/speedgoose/test/invalidation.test.ts","startTime":1752941138292,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Population End-to-End Tests"],"duration":16,"failureDetails":[{"message":"thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\""}],"failureMessages":["Error: thrown: \"Exceeded timeout of 5000 ms for a hook.\nAdd a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n    at /home/arqo/projekty/speedgoose/test/population.test.ts:9:5\n    at _dispatchDescribe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:91:26)\n    at describe (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/index.js:55:5)\n    at Object.<anonymous> (/home/arqo/projekty/speedgoose/test/population.test.ts:5:1)\n    at Runtime._execModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1439:24)\n    at Runtime._loadModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:1022:12)\n    at Runtime.requireModule (/home/arqo/projekty/speedgoose/node_modules/jest-runtime/build/index.js:882:12)\n    at jestAdapter (/home/arqo/projekty/speedgoose/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:77:13)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runTestInternal (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/home/arqo/projekty/speedgoose/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"Population End-to-End Tests should populate friends field with full objects","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should populate friends field with full objects"}],"coverage":{},"endTime":1752941138292,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPopulation End-to-End Tests › should populate friends field with full objects\u001b[39m\u001b[22m\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  7 |\u001b[39m     \u001b[36mlet\u001b[39m \u001b[33mFriendModel\u001b[39m\u001b[33m:\u001b[39m mongoose\u001b[33m.\u001b[39m\u001b[33mModel\u001b[39m\u001b[33m<\u001b[39m\u001b[33mFriend\u001b[39m\u001b[33m>\u001b[39m\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  8 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  9 |\u001b[39m     beforeAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 10 |\u001b[39m         \u001b[36mawait\u001b[39m mongoose\u001b[33m.\u001b[39mconnect(\u001b[33mTEST_SPEEDGOOSE_CONFIG\u001b[39m\u001b[33m.\u001b[39muri)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 11 |\u001b[39m         \u001b[33mUserModel\u001b[39m \u001b[33m=\u001b[39m mongoose\u001b[33m.\u001b[39mmodel\u001b[33m<\u001b[39m\u001b[33mUser\u001b[39m\u001b[33m>\u001b[39m(\u001b[32m'User'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 12 |\u001b[39m         \u001b[33mFriendModel\u001b[39m \u001b[33m=\u001b[39m mongoose\u001b[33m.\u001b[39mmodel\u001b[33m<\u001b[39m\u001b[33mFriend\u001b[39m\u001b[33m>\u001b[39m(\u001b[32m'Friend'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/population.test.ts\u001b[39m\u001b[0m\u001b[2m:9:5\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtest/population.test.ts\u001b[39m\u001b[0m\u001b[2m:5:1)\u001b[22m\u001b[2m\u001b[22m\n\n\n  \u001b[1m● \u001b[22mTest suite failed to run\n\n    thrown: \"Exceeded timeout of 5000 ms for a hook.\n    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout.\"\n\n    \u001b[0m \u001b[90m 13 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 14 |\u001b[39m\n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 15 |\u001b[39m     afterAll(\u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\n     \u001b[90m    |\u001b[39m     \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 16 |\u001b[39m         \u001b[36mawait\u001b[39m mongoose\u001b[33m.\u001b[39mdisconnect()\u001b[33m;\u001b[39m\n     \u001b[90m 17 |\u001b[39m     })\u001b[33m;\u001b[39m\n     \u001b[90m 18 |\u001b[39m\u001b[0m\n\n      \u001b[2mat \u001b[22m\u001b[0m\u001b[36mtest/population.test.ts\u001b[39m\u001b[0m\u001b[2m:15:5\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[0m\u001b[36mtest/population.test.ts\u001b[39m\u001b[0m\u001b[2m:5:1)\u001b[22m\n","name":"/home/arqo/projekty/speedgoose/test/population.test.ts","startTime":1752941138292,"status":"failed","summary":""}],"wasInterrupted":false}
